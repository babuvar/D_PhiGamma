#ifndef __CINT__
#include "RooGlobalFunc.h"
#endif
#include "RooRealVar.h"
#include "RooDataSet.h"
#include "RooGaussian.h"
#include "RooConstVar.h"
#include "RooChebychev.h"
#include "RooAddPdf.h"
#include "RooSimultaneous.h"
#include "RooCategory.h"
#include "TCanvas.h"
#include "TAxis.h"
#include "RooPlot.h"
void SlowPi(void)
{
  //LOAD DATA FILE 
    TCanvas *c1 = new TCanvas("myCanvas1","My Canvas1");
    TH1F *h1 = new TH1F("Stats","P_{#pi^{s}} distribution: D^{0} #rightarrow #phi #pi^{0}",100,0,1);  //
    TH1F *h2 = new TH1F("Stats1","P_{#pi^{s}} distribution: D^{0} #rightarrow K_{s} #pi^{0}",100,0,1);  //
    TH1F *h3 = new TH1F("Stats2","cos(#theta_{#pi^{s}}) distribution: D^{0} #rightarrow #phi #pi^{0}",100,-1,1);  //
    TH1F *h4 = new TH1F("Stats3","cos(#theta_{#pi^{s}}) distribution: D^{0} #rightarrow K_{s} #pi^{0}",100,-1,1);  //


h1->SetFillColor(30);
h3->SetFillColor(30);
h2->SetFillColor(46);
h4->SetFillColor(46);


  TChain* chain=new TChain("h1");
  TChain* chain2=new TChain("h4");//kspi0

  chain->Add("PhiPi0_4s_Data.root");
  chain2->Add("data.root");
  
  Int_t nevt=(int)chain->GetEntries();
 Int_t nevt2=(int)chain2->GetEntries();

  cout<<"nevt\t"<<nevt <<endl;
  Float_t f_delm,f_dstcts,f_dstcharge,f_pi0mom,f_pi0mass,f_phimass,f_dstps,f_d0mass,f_spip,f_spi_ct_z,f_spip2,f_spi_ct_z2, f_Kppid,f_Kmpid,f_Pispid,f_Kpdr,f_Kmdr,f_Pisdr,f_Kpdz,f_Kmdz,f_Pisdz,f_Phot1the,f_Phot2the,f_Photon1e,f_Photon2e;

  chain->SetBranchAddress("Deltam",&f_delm);
  chain->SetBranchAddress("Pizmomen",&f_pi0mom);
  chain->SetBranchAddress("Pizmassn",&f_pi0mass);
  chain->SetBranchAddress("Phimass",&f_phimass);
  chain->SetBranchAddress("Dstps",&f_dstps);
  chain->SetBranchAddress("Dstcts",&f_dstcts);
  chain->SetBranchAddress("Dstarcha",&f_dstcharge);
  chain->SetBranchAddress("Dzeromas",&f_d0mass);
  chain->SetBranchAddress("Pismom",&f_spip);
  chain->SetBranchAddress("Piscost",&f_spi_ct_z);
  chain->SetBranchAddress("Kppid",&f_Kppid);
  chain->SetBranchAddress("Kmpid",&f_Kmpid);
  chain->SetBranchAddress("Pispid",&f_Pispid);
  chain->SetBranchAddress("Kpdr",&f_Kpdr);
  chain->SetBranchAddress("Kmdr",&f_Kmdr);
  chain->SetBranchAddress("Pisdr",&f_Pisdr);
  chain->SetBranchAddress("Kpdz",&f_Kpdz);
  chain->SetBranchAddress("Kmdz",&f_Kmdz);
  chain->SetBranchAddress("Pisdz",&f_Pisdz);
  chain->SetBranchAddress("Phot1the",&f_Phot1the);
  chain->SetBranchAddress("Phot2the",&f_Phot2the);
  chain->SetBranchAddress("Photon1e",&f_Photon1e);
  chain->SetBranchAddress("Photon2e",&f_Photon2e);
int photon1cutflag=0, photon2cutflag=0;

  chain2->SetBranchAddress("spip",&f_spip2);
  chain2->SetBranchAddress("spi_ct_z",&f_spi_ct_z2);

  Int_t nevt_ac_p(0);
  Int_t nevt_ac_n(0);
  for(int i=0;i<nevt;i++) 
    {
      chain->GetEntry(i);
//Phot1cut
if(f_Phot1the > -60 && f_Phot1the < 67 && f_Photon1e > 0.05){photon1cutflag=1;}
else if((f_Phot1the < -60 || f_Phot1the > 67) && f_Photon1e > 0.1){photon1cutflag=1;}
else{photon1cutflag=0;}

//Phot2cut
if(f_Phot2the > -60 && f_Phot2the < 67 && f_Photon2e > 0.05){photon2cutflag=1;}
else if((f_Phot2the < -60 || f_Phot2the > 67) && f_Photon2e > 0.1){photon2cutflag=1;}
else{photon2cutflag=0;}
if(f_delm > 0.14 && f_delm < 0.16) {
if(f_phimass > 1.01 && f_phimass < 1.03) {
if(f_pi0mass > 0.119 && f_pi0mass < 0.151) {
if(f_pi0mom > 0.38) {//0.75
if(f_dstps > 2.5) {//2.9
if(f_d0mass > 1.83 && f_d0mass < 1.89) {
if(fabs(f_Kpdr) < 1.0 && fabs(f_Kmdr) < 1.0 && fabs(f_Pisdr) < 1.0){//dr
if(fabs(f_Kpdz) < 3.0 && fabs(f_Kmdz) < 3.0 && fabs(f_Pisdz) < 3.0){//dz
if(fabs(f_Kppid) > 0.1 && fabs(f_Kmpid) > 0.1){//K-PID
if(fabs(f_Pispid) < 0.9){//Pi-PID
if(photon1cutflag == 1 && photon1cutflag == 1){


h1->Fill(f_spip);
h3->Fill(f_spi_ct_z);

}}}}}}}}}}}

    }


  for(int i=0;i<nevt2;i++) 
    {
      chain2->GetEntry(i);
h2->Fill(f_spip2);
h4->Fill(f_spi_ct_z2);

    }

c1->Divide(2,2);
c1->cd(1);
  h1->Draw();
c1->cd(2);
  h2->Draw();
c1->cd(3);
  h3->Draw();
c1->cd(4);
  h4->Draw();




}//end of simfit

